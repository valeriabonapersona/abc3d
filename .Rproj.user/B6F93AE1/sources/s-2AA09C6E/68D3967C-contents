'
  Functions to find parents / children within the ABA tree structure
'


# find_children() ------------------------------------------------------------
#' @title Find smaller areas (children) of a larger brain area categorization
#' (parent) in the Allen Brain Atlas.
#'
#'
#' @description The Allen Brain Atlas is organized with a tree structure, where
#'  smaller brain areas (e.g. nuclei) are grouped into larger brain areas.
#'  Given a particular (parent) acronym, this function finds related sub-brain areas,
#'  which are returned in a string. The function also returns children that are
#'  parents themselves, but it does not return the smallest categorization of brain areas.
#'  To find the smallest categorizations, use the find_all_children().
#'
#'  If the parent acronym provided is not present in atlas, the function returns an empty string.
#'
#'
#' @param atlas Data frame with (at least) two character variables: one for the parents (parent_acronym),
#' and one for the children (acronym).
#' @param parent Acronym of the parent brain area. It must be a character vector of
#' length 1.
#'
#' @return
#' @export
#'
#' @examples
#' x <- data.frame(
#' parent_acronym = c(rep("main_parent", 3), rep("child_with_children", 2), "grandchild_with_children"),
#' acronym = c("main_parent", "child_with_children", "child_without_children", "grandchild_with_children", "grandchild_without_children", "great_grandchild"))
#' this_parent <- "child_with_children"
#'
#' find_children(atlas = x, parent = this_parent)
#' # to return also "great_grandchild", you find_all_children
#'
find_children <- function(atlas, parent) {

  # check atlas is a dataframe
  assertthat::assert_that(is.data.frame(atlas))

  # check parent_acronym and acronym are the var names of the df
  assertthat::has_name(atlas, "parent_acronym")
  assertthat::has_name(atlas, "acronym")

  # check parent has length 1
  assertthat::are_equal(length(parent), 1)


  # get the children
  atlas %>%
    dplyr::filter(parent_acronym == parent) %>%
    dplyr::pull(acronym)

}


# find_all_children() -------------------------------------------------------

#' @title Find smaller areas (children) of a larger brain area categorization
#' (parent) in the Allen Brain Atlas.
#'
#' @description The Allen Brain Atlas is organized with a tree structure, where
#'  smaller brain areas (e.g. nuclei) are grouped into larger brain areas. Given
#'  a particular (child) acronym, this function finds all sub-brain areas, and
#'  returns them as a string. This function returns children that are parents themselves,
#'  as well their children (i.e., grandchildren (etc.) of the parent structure provided).
#'
#' @param atlas Data frame with (at least) two character variables: one for the parents (parent_acronym),
#' and one for the children (acronym).
#' @param parent Acronym of the parent brain area. It must be a character vector of
#' length 1.
#'
#' @return
#' @export
#'
#' @examples
#' x <- data.frame(
#' parent_acronym = c(rep("main_parent", 3), rep("child_with_children", 2), "grandchild_with_children"),
#' acronym = c("main_parent", "child_with_children", "child_without_children", "grandchild_with_children", "grandchild_without_children", "great_grandchild"))
#' this_parent <- "child_with_children"
#'
#' find_all_children(atlas = x, parent = this_parent)
#'

find_all_children <- function(atlas, parent) {

  # check atlas is a dataframe
  assertthat::assert_that(is.data.frame(atlas))

  # check parent_acronym and acronym are the var names of the df
  assertthat::has_name(atlas, "parent_acronym")
  assertthat::has_name(atlas, "acronym")

  # check parent has length 1
  assertthat::are_equal(length(parent), 1)

  # check parent is in parent_acronym
  if(!parent %in% atlas$parent_acronym & !parent %in% atlas$acronym) stop(paste0(parent, ": acronym not found in atlas"))
  if(!parent %in% atlas$parent_acronym & parent %in% atlas$acronym) warning(paste0(parent, ": acronym is parent only of itself"))


  # find first generation
  f_1 <- find_children(atlas, parent) # find children of this parent
  save_f <- f_1

  # repeat until no more children are found
  repeat {

    f_n <- unlist(lapply(f_1, find_children, atlas = atlas)) # find grandchildren
    save_f <- c(save_f, f_n)
    f_1 <- f_n

    if (is.null(f_n)) break
  } # repeat until no more found

  return(save_f)
}




# find_parents() ----------------------------------------------------------
#' @title Find larger grouping areas (parents) of a smaller brain area
#' (child) in the Allen Brain Atlas.
#'
#' @description The Allen Brain Atlas is organized with a tree structure, where
#'  smaller brain areas (e.g. nuclei) are grouped into larger brain areas. This function
#'  allows you to find the parent of a sub-brain area of choice. Returns only one level up
#'  in the tree structure.
#'
#' @param atlas Data frame with (at least) two character variables: one for the parents (parent_acronym),
#' and one for the children (acronym).
#' @param child Acronym of the child brain area. It must be a character vector of
#' length 1.
#'
#' @export
#' @return
#'
#' @examples
#'#' x <- data.frame(
#' parent_acronym = c(rep("main_parent", 3), rep("child_with_children", 2), "grandchild_with_children"),
#' acronym = c("main_parent", "child_with_children", "child_without_children", "grandchild_with_children", "grandchild_without_children", "great_grandchild"))
#' this_child <- "child_with_children"
#'
#' find_parents(atlas = x, child = this_child)


find_parents <- function(atlas, child) {

  # check atlas is a dataframe
  assertthat::assert_that(is.data.frame(atlas))

  # check parent_acronym and acronym are the var names of the df
  assertthat::has_name(atlas, "parent_acronym")
  assertthat::has_name(atlas, "acronym")

  # check parent has length 1
  assertthat::are_equal(length(child), 1)

  # check parent is in parent_acronym
  if(!child %in% atlas$acronym) warning(paste0(child, ': acronym provided not found in atlas'))

  atlas %>%
    dplyr::filter(acronym %in% child) %>%
    dplyr::pull(parent_acronym)

}


# adapt_estimation_atlas --------------------------------------------------
#' @title Adapt estimation atlas from Erö et al. to be used in the analysis
#'
#' @description Wrapper around dplyr functions to select only relevant
#' brain areas of the cell estimation atlas. The atlas estimating the number of cells per brain area was generated
#' in this publication (doi:10.3389/fninf.2018.00084). The atlas follows the Allen Brain
#' Reference Atlas Categorization (mouse brain).
#'
#' @param estimation_atlas atlas from Erö et al. Use atlas as present in the package, or
#' provide a dataframe where each row is a brain area. The dataframe must contain a variable
#' called "Regions" with the names on the brain areas. The other variable(s) are the estimations,
#' i.e "Neurons", "Glia", "Inhibitory" etc.
#' @param adj_aba_atlas dataframe with Allen Brain Atlas tree, with an additional variable
#' called "my_grouping" with the level of categorization of interest. The dataframe contains also
#' the variable "name" specifying the name of the brain areas. For an example of how to create
#' this dataframe, see X.
#'
#' @return
#' @export
#'
#' @examples
#' x <- data.frame(
#' Regions = c("a_1", "a_2", "a_3", "b_1", "b_2"),
#' Cells = c(10000, 2100, 39847, 754, 923)
#' )
#'
#' y <- data.frame(
#' name = c("a_1", "a_2", "a_3", "b_1", "b_2", "c_1", "c_2"),
#' my_grouping = c(rep("a",3), rep("b",2), rep("c", 2))
#' )
#'
#' adapt_estimation_atlas(x,y)


## upload data to package
adapt_estimation_atlas <- function(estimation_atlas, adj_aba_atlas) {

  # check that estimation atlas and adj aba atlas are dataframe
  assertthat::assert_that(is.data.frame(estimation_atlas))
  assertthat::assert_that(is.data.frame(adj_aba_atlas))

  # check that there are the correct variable names
  assertthat::has_name(estimation_atlas, "Regions")
  assertthat::has_name(adj_aba_atlas, "my_grouping")
  assertthat::has_name(adj_aba_atlas, "name")


  # check that Regions and name have the same levels
  assertthat::are_equal(sum(!estimation_atlas$Regions %in% adj_aba_atlas$name, na.rm = TRUE), 0)
  if (sum(!adj_aba_atlas$name %in% estimation_atlas$Regions, na.rm = TRUE) != 0) warning("Some brain areas were not present in the estimation atlas.")

  # function
  estimation_atlas %>%

    # rename vars for consistency
    dplyr::rename_all(tolower) %>%
    dplyr::rename(name = regions) %>%

    # merge atlases
    dplyr::full_join(adj_aba_atlas[,c("name", "my_grouping")], by = "name") %>%

    # summarize per grouping
    dplyr::group_by(my_grouping) %>%
    dplyr::summarise(dplyr::across(-name,
                     ~ sum(.x, na.rm = TRUE))) %>%

    # remove NA of non grouped areas
    dplyr::filter(!is.na(my_grouping))

}
